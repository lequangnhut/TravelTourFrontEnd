import { Inject, Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, first, map, switchMap } from 'rxjs/operators';
import { AUTH_SERVICE } from './tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./auth.service";
class AuthInterceptor {
    authService;
    http;
    /**
     * Is refresh token is being executed
     */
    refreshInProgress = false;
    /**
     * Notify all outstanding requests through this subject
     */
    refreshSubject = new Subject();
    constructor(authService, http) {
        this.authService = authService;
        this.http = http;
    }
    /**
     * Intercept an outgoing `HttpRequest`
     */
    intercept(req, delegate) {
        if (this.skipRequest(req)) {
            return delegate.handle(req);
        }
        return this.processIntercept(req, delegate);
    }
    /**
     * Process all the requests via custom interceptors.
     */
    processIntercept(original, delegate) {
        const clone = original.clone();
        return this.request(clone)
            .pipe(switchMap((req) => delegate.handle(req)), catchError((res) => this.responseError(clone, res)));
    }
    /**
     * Request interceptor. Delays request if refresh is in progress
     * otherwise adds token to the headers
     */
    request(req) {
        if (this.refreshInProgress) {
            return this.delayRequest(req);
        }
        return this.addToken(req);
    }
    /**
     * Failed request interceptor, check if it has to be processed with refresh
     */
    responseError(req, res) {
        const refreshShouldHappen = this.authService.refreshShouldHappen(res, req);
        if (refreshShouldHappen && !this.refreshInProgress) {
            this.refreshInProgress = true;
            this.authService.refreshToken()
                .subscribe({
                next: () => {
                    this.refreshInProgress = false;
                    this.refreshSubject.next(true);
                },
                error: () => {
                    this.refreshInProgress = false;
                    this.refreshSubject.next(false);
                },
            });
        }
        if (refreshShouldHappen && this.refreshInProgress) {
            return this.retryRequest(req, res);
        }
        return throwError(() => res);
    }
    /**
     * Add access token to headers or the request
     */
    addToken(req) {
        return this.authService.getAccessToken()
            .pipe(first(), map((token) => {
            if (token) {
                return req.clone({
                    setHeaders: this.authService.getHeaders?.(token) ?? { Authorization: `Bearer ${token}` },
                });
            }
            return req;
        }));
    }
    /**
     * Delay request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    delayRequest(req) {
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? this.addToken(req) : throwError(() => req)));
    }
    /**
     * Retry request, by subscribing on refresh event, once it finished, process it
     * otherwise throw error
     */
    retryRequest(req, res) {
        return this.refreshSubject.pipe(first(), switchMap((status) => status ? this.http.request(req) : throwError(() => res || req)));
    }
    /**
     * Checks if request must be skipped by interceptor.
     */
    skipRequest(req) {
        return this.authService.skipRequest?.(req) || this.authService.verifyRefreshToken?.(req);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: AuthInterceptor, deps: [{ token: AUTH_SERVICE }, { token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: AuthInterceptor });
}
export { AuthInterceptor };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: AuthInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.AuthService, decorators: [{
                    type: Inject,
                    args: [AUTH_SERVICE]
                }] }, { type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,