{"version":3,"file":"ngx-auth.mjs","sources":["../../src/tokens.ts","../../src/auth.service.ts","../../src/auth.interceptor.ts","../../src/protected.guard.ts","../../src/public.guard.ts","../../src/auth.module.ts","../../src/ngx-auth.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');\nexport const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');\nexport const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n/**\n * Essential service for authentication\n */\nexport abstract class AuthService {\n\n  /**\n   * Check, if user already authorized.\n   * Should return Observable with true or false values\n   */\n  abstract isAuthorized(): Observable<boolean>;\n\n  /**\n   * Get access token\n   * Should return access token in Observable from e.g.\n   * localStorage\n   */\n  abstract getAccessToken(): Observable<string | null>;\n\n  /**\n   * Function, that should perform refresh token\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   */\n  abstract refreshToken(): Observable<any>;\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   */\n  abstract refreshShouldHappen(response: HttpErrorResponse, request?: HttpRequest<any>): boolean;\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   */\n  abstract verifyRefreshToken?(request: HttpRequest<any>): boolean;\n\n  /**\n   * Checks if request must be skipped by interceptor.\n   * Useful for requests such as request token which doesn't require token in headers\n   */\n  abstract skipRequest?(request: HttpRequest<any>): boolean;\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   * To change behavior, override this method.\n   */\n  abstract getHeaders?(token: string): { [name: string]: string | string[]; };\n\n  /**\n   * Saves last interrupted url inside of the service for further reusage,\n   * e.g. restoring interrupted page after logging in\n   */\n  abstract setInterruptedUrl?(url: string): void;\n}\n","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './tokens';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  /**\n   * Is refresh token is being executed\n   */\n  private refreshInProgress = false;\n\n  /**\n   * Notify all outstanding requests through this subject\n   */\n  private refreshSubject: Subject<boolean> = new Subject<boolean>();\n\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    private http: HttpClient,\n  ) { }\n\n  /**\n   * Intercept an outgoing `HttpRequest`\n   */\n  intercept(\n    req: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.skipRequest(req)) {\n      return delegate.handle(req);\n    }\n\n    return this.processIntercept(req, delegate);\n  }\n\n  /**\n   * Process all the requests via custom interceptors.\n   */\n  private processIntercept(\n    original: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const clone: HttpRequest<any> = original.clone();\n\n    return this.request(clone)\n      .pipe(\n        switchMap((req: HttpRequest<any>) => delegate.handle(req)),\n        catchError((res: HttpErrorResponse) => this.responseError(clone, res))\n      );\n  }\n\n  /**\n   * Request interceptor. Delays request if refresh is in progress\n   * otherwise adds token to the headers\n   */\n  private request(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    if (this.refreshInProgress) {\n      return this.delayRequest(req);\n    }\n\n    return this.addToken(req);\n  }\n\n  /**\n   * Failed request interceptor, check if it has to be processed with refresh\n   */\n  private responseError(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const refreshShouldHappen: boolean =\n      this.authService.refreshShouldHappen(res, req);\n\n    if (refreshShouldHappen && !this.refreshInProgress) {\n      this.refreshInProgress = true;\n\n      this.authService.refreshToken()\n        .subscribe({\n          next: () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(true);\n          },\n          error: () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(false);\n          },\n        });\n    }\n\n    if (refreshShouldHappen && this.refreshInProgress) {\n      return this.retryRequest(req, res);\n    }\n\n    return throwError(() => res);\n  }\n\n  /**\n   * Add access token to headers or the request\n   */\n  private addToken(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    return this.authService.getAccessToken()\n      .pipe(\n        first(),\n        map((token: string | null) => {\n          if (token) {\n            return req.clone({\n              setHeaders: this.authService.getHeaders?.(token) ?? { Authorization: `Bearer ${token}` },\n            });\n          }\n\n          return req;\n        }),\n      );\n  }\n\n  /**\n   * Delay request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private delayRequest(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    return this.refreshSubject.pipe(\n      first(),\n      switchMap((status: boolean) =>\n        status ? this.addToken(req) : throwError(() => req)\n      )\n    );\n  }\n\n  /**\n   * Retry request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   */\n  private retryRequest(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    return this.refreshSubject.pipe(\n      first(),\n      switchMap((status: boolean) =>\n        status ? this.http.request(req) : throwError(() => res || req)\n      )\n    );\n  }\n\n  /**\n   * Checks if request must be skipped by interceptor.\n   */\n  private skipRequest(req: HttpRequest<any>,) {\n    return this.authService.skipRequest?.(req) || this.authService.verifyRefreshToken?.(req);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, inject, Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n */\n@Injectable()\nexport class ProtectedGuard {\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PUBLIC_FALLBACK_PAGE_URI) private publicFallbackPageUri: string,\n    @Inject(DOCUMENT) private readonly document: Document,\n    private router: Router\n  ) { }\n\n  /**\n   * CanActivate handler\n   */\n  canActivate(state: RouterStateSnapshot): Observable<boolean> {\n    return this.authService.isAuthorized()\n      .pipe(map((isAuthorized: boolean) => {\n        if (!isAuthorized && !this.isPublicPage(state)) {\n          this.authService.setInterruptedUrl?.(state.url);\n\n          this.navigate(this.publicFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }));\n  }\n\n  /**\n   * Check, if current page is fallback page\n   */\n  private isPublicPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.publicFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      this.document.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n}\n\nexport const protectedGuard: CanActivateFn = (_route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  const guard = inject(ProtectedGuard);\n\n  return guard.canActivate(state);\n};\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, inject, Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n */\n@Injectable()\nexport class PublicGuard {\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PROTECTED_FALLBACK_PAGE_URI) private protectedFallbackPageUri: string,\n    @Inject(DOCUMENT) private readonly document: Document,\n    private router: Router\n  ) { }\n\n  /**\n   * CanActivate handler\n   */\n  canActivate(state: RouterStateSnapshot): Observable<boolean> {\n    return this.authService.isAuthorized()\n      .pipe(map((isAuthorized: boolean) => {\n        if (isAuthorized && !this.isProtectedPage(state)) {\n          this.navigate(this.protectedFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }));\n  }\n\n  /**\n   * Check, if current page is protected fallback page\n   */\n  private isProtectedPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.protectedFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      this.document.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n}\n\nexport const publicGuard: CanActivateFn = (_route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n  const guard = inject(PublicGuard);\n\n  return guard.canActivate(state);\n};\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { AuthInterceptor } from './auth.interceptor';\nimport { ProtectedGuard } from './protected.guard';\nimport { PublicGuard } from './public.guard';\n\n@NgModule({\n  providers: [\n    PublicGuard,\n    ProtectedGuard,\n    AuthInterceptor,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class AuthModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1"],"mappings":"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"}