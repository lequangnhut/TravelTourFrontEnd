import { DOCUMENT } from '@angular/common';
import { Inject, inject, Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./auth.service";
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 */
class PublicGuard {
    authService;
    protectedFallbackPageUri;
    document;
    router;
    constructor(authService, protectedFallbackPageUri, document, router) {
        this.authService = authService;
        this.protectedFallbackPageUri = protectedFallbackPageUri;
        this.document = document;
        this.router = router;
    }
    /**
     * CanActivate handler
     */
    canActivate(state) {
        return this.authService.isAuthorized()
            .pipe(map((isAuthorized) => {
            if (isAuthorized && !this.isProtectedPage(state)) {
                this.navigate(this.protectedFallbackPageUri);
                return false;
            }
            return true;
        }));
    }
    /**
     * Check, if current page is protected fallback page
     */
    isProtectedPage(state) {
        return state.url === this.protectedFallbackPageUri;
    }
    /**
     * Navigate away from the app / path
     */
    navigate(url) {
        if (url.startsWith('http')) {
            this.document.location.href = url;
        }
        else {
            this.router.navigateByUrl(url);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: PublicGuard, deps: [{ token: AUTH_SERVICE }, { token: PROTECTED_FALLBACK_PAGE_URI }, { token: DOCUMENT }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: PublicGuard });
}
export { PublicGuard };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: PublicGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.AuthService, decorators: [{
                    type: Inject,
                    args: [AUTH_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PROTECTED_FALLBACK_PAGE_URI]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.Router }]; } });
export const publicGuard = (_route, state) => {
    const guard = inject(PublicGuard);
    return guard.canActivate(state);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3B1YmxpYy5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLDJCQUEyQixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7O0FBRXJFOzs7R0FHRztBQUNILE1BQ2EsV0FBVztJQUVVO0lBQ2U7SUFDVjtJQUMzQjtJQUpWLFlBQ2dDLFdBQXdCLEVBQ1Qsd0JBQWdDLEVBQzFDLFFBQWtCLEVBQzdDLE1BQWM7UUFIUSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNULDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBUTtRQUMxQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQzdDLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDcEIsQ0FBQztJQUVMOztPQUVHO0lBQ0gsV0FBVyxDQUFDLEtBQTBCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUU7YUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQXFCLEVBQUUsRUFBRTtZQUNsQyxJQUFJLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7Z0JBRTdDLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0lBRUQ7O09BRUc7SUFDSyxlQUFlLENBQUMsS0FBMEI7UUFDaEQsT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxRQUFRLENBQUMsR0FBVztRQUMxQixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO3VHQXhDVSxXQUFXLGtCQUVaLFlBQVksYUFDWiwyQkFBMkIsYUFDM0IsUUFBUTsyR0FKUCxXQUFXOztTQUFYLFdBQVc7MkZBQVgsV0FBVztrQkFEdkIsVUFBVTs7MEJBR04sTUFBTTsyQkFBQyxZQUFZOzswQkFDbkIsTUFBTTsyQkFBQywyQkFBMkI7OzBCQUNsQyxNQUFNOzJCQUFDLFFBQVE7O0FBdUNwQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQWtCLENBQUMsTUFBOEIsRUFBRSxLQUEwQixFQUFFLEVBQUU7SUFDdkcsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRWxDLE9BQU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIGluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGVGbiwgUm91dGVyLCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBBVVRIX1NFUlZJQ0UsIFBST1RFQ1RFRF9GQUxMQkFDS19QQUdFX1VSSSB9IGZyb20gJy4vdG9rZW5zJztcblxuLyoqXG4gKiBHdWFyZCwgY2hlY2tzIGFjY2VzcyB0b2tlbiBhdmFpbGFiaWxpdHkgYW5kIGFsbG93cyBvciBkaXNhbGxvd3MgYWNjZXNzIHRvIHBhZ2UsXG4gKiBhbmQgcmVkaXJlY3RzIG91dFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHVibGljR3VhcmQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEFVVEhfU0VSVklDRSkgcHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgQEluamVjdChQUk9URUNURURfRkFMTEJBQ0tfUEFHRV9VUkkpIHByaXZhdGUgcHJvdGVjdGVkRmFsbGJhY2tQYWdlVXJpOiBzdHJpbmcsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHsgfVxuXG4gIC8qKlxuICAgKiBDYW5BY3RpdmF0ZSBoYW5kbGVyXG4gICAqL1xuICBjYW5BY3RpdmF0ZShzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmlzQXV0aG9yaXplZCgpXG4gICAgICAucGlwZShtYXAoKGlzQXV0aG9yaXplZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoaXNBdXRob3JpemVkICYmICF0aGlzLmlzUHJvdGVjdGVkUGFnZShzdGF0ZSkpIHtcbiAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRoaXMucHJvdGVjdGVkRmFsbGJhY2tQYWdlVXJpKTtcblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrLCBpZiBjdXJyZW50IHBhZ2UgaXMgcHJvdGVjdGVkIGZhbGxiYWNrIHBhZ2VcbiAgICovXG4gIHByaXZhdGUgaXNQcm90ZWN0ZWRQYWdlKHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YXRlLnVybCA9PT0gdGhpcy5wcm90ZWN0ZWRGYWxsYmFja1BhZ2VVcmk7XG4gIH1cblxuICAvKipcbiAgICogTmF2aWdhdGUgYXdheSBmcm9tIHRoZSBhcHAgLyBwYXRoXG4gICAqL1xuICBwcml2YXRlIG5hdmlnYXRlKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgIHRoaXMuZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcHVibGljR3VhcmQ6IENhbkFjdGl2YXRlRm4gPSAoX3JvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkgPT4ge1xuICBjb25zdCBndWFyZCA9IGluamVjdChQdWJsaWNHdWFyZCk7XG5cbiAgcmV0dXJuIGd1YXJkLmNhbkFjdGl2YXRlKHN0YXRlKTtcbn07XG4iXX0=